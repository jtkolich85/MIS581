import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# import os
# os.chdir("C:\\Users\\DILIP\\Downloads")

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn import preprocessing
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import confusion_matrix, classification_report 
from sklearn.pipeline import make_pipeline
from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score, accuracy_score, classification_report
from collections import Counter
from sklearn.model_selection import KFold, StratifiedKFold
import statsmodels.api as sm
from imblearn.pipeline import make_pipeline as imbalanced_make_pipeline
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import NearMiss

df = pd.read_csv(r'C:\Users\jtkol\OneDrive\Desktop\CSUG Courses\MIS581 - Capstone - Business Intelligence and Data Analytics\Dataset_spine.csv')

df.head()

df.drop('Unnamed: 13',axis=1,inplace=True)

df.info()

plt.figure(figsize=(12,10))
sns.heatmap(df.corr(),annot=True)

df["Class_att"]=pd.get_dummies(df["Class_att"],drop_first=True)

cols=df_constant.columns[:-1]
model=sm.Logit(df.Class_att,df_constant[cols])
result=model.fit()
result.summary()

def back_feature_elem (data_frame,dep_var,col_list):


    while len(col_list)>0 :
        model=sm.Logit(dep_var,data_frame[col_list])
        result=model.fit(disp=0)
        largest_pvalue=round(result.pvalues,3).nlargest(1)
        if largest_pvalue[0]<(0.05):
            return result
            break
        else:
            col_list=col_list.drop(largest_pvalue.index)

result=back_feature_elem(df_constant,df.Class_att,cols)

result.summary()

import sklearn
new_features=df[['pelvic_tilt','sacral_slope','pelvic_radius','degree_spondylolisthesis',"Class_att"]]
x=new_features.iloc[:,:-1]
y=new_features.iloc[:,-1]
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.20,random_state=5)

from sklearn.linear_model import LogisticRegression
logreg=LogisticRegression()
logreg.fit(x_train,y_train)
y_pred=logreg.predict(x_test)

sklearn.metrics.accuracy_score(y_test,y_pred)

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)
conf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])
plt.figure(figsize = (8,5))
sns.heatmap(conf_matrix, annot=True,fmt='d',cmap='gist_ncar')

